generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Invoice {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime

  invoiceDate   DateTime // dateTimeIssues at json level
  invoiceNumber String   @unique // Internal Id for the invoice at json level 
  issuerName    String // issuerName at json level 
  receiverName  String // receiverName at json level 
  totalSales    Decimal // totalSales at json level
  totalDiscount Decimal // totalDiscount at json level
  netAmount     Decimal // netAmount at json level
  total         Decimal // total at json level

  invoiceStatus String // validationResults => Status 

  currency        String  @default("EGP") // document => invoice lines => object [0] => unit value => currencySold
  exchangeRate    Decimal // document => invoice lines => object [0] => unit value => exchangeRate
  taxAmount       Decimal // document => invoice lines => Tax totals => run through object and add "Amount"
  issuerCountry   String // document => issuer => address => country
  receiverCountry String // document => receiver => address => country
  issuerEtaId     String // document => receiver => issuerId => id
  receiverEtaId   String // document => issuer => receiverId => id

  customerId Int?
  supplierId Int?
  Customer   Customer? @relation(fields: [customerId], references: [id])
  Supplier   Supplier? @relation(fields: [supplierId], references: [id])
}

// A customer is when out client is the issuer
// A supplier is when out client is the receiver
model Customer {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime

  name         String // receiverName from invoice
  country      String? // receiverCountry from invoice
  etaId        String? // issuerEtaId or receiverEtaId from invoice
  paymentTerms Int?
  Invoice      Invoice[]
  BankStatement BankStatement[]
}

model Supplier {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime

  name         String // issuerName from invoice
  country      String? // issuerCountry from invoice
  etaId        String? // issuerEtaId or receiverEtaId  from invoice
  paymentTerms Int?
  Invoice      Invoice[]
  BankStatement BankStatement[]
}

model Bank {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  name      String   @unique
  
  bankStatements BankStatement[]
}

model BankStatement {
  id            Int      @id @default(autoincrement())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  fileName      String?
  bankName      String
  accountNumber String
  statementPeriodStart DateTime
  statementPeriodEnd   DateTime
  accountType    String?
  accountCurrency String?
  startingBalance Decimal
  endingBalance   Decimal
  
  rawTextContent String? @db.Text
  processingStatus String @default("processed")
  
  // New annotation-related fields
  fileUrl          String?  // URL to original uploaded file
  parsed           Boolean  @default(false)
  validated        Boolean  @default(false)
  validationStatus String   @default("pending") // "pending" | "passed" | "failed"
  validationNotes  String?  // Optional notes from validator
  validatedAt      DateTime?
  validatedBy      String?  // User ID who validated
  locked           Boolean  @default(false) // Prevent further edits after approval
  googleSheetId    String?  // Google Sheets spreadsheet ID for syncing
  
  bankId        Int
  bank          Bank @relation(fields: [bankId], references: [id])
  
  customerId    Int?
  supplierId    Int?
  Customer      Customer? @relation(fields: [customerId], references: [id])
  Supplier      Supplier? @relation(fields: [supplierId], references: [id])
  
  transactions  Transaction[]
}

model Transaction {
  id            Int      @id @default(autoincrement())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  transactionDate DateTime
  creditAmount   Decimal?
  debitAmount    Decimal?
  description    String?
  balance        Decimal?
  pageNumber     String?
  entityName     String?
  
  bankStatementId Int
  bankStatement   BankStatement @relation(fields: [bankStatementId], references: [id], onDelete: Cascade)
}
