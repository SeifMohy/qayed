generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Invoice {
  id                    Int                @id @default(autoincrement())
  createdAt             DateTime           @default(now())
  updatedAt             DateTime
  invoiceDate           DateTime
  invoiceNumber         String             @unique
  issuerName            String
  receiverName          String
  totalSales            Decimal
  totalDiscount         Decimal
  netAmount             Decimal
  total                 Decimal
  invoiceStatus         String
  currency              String             @default("EGP")
  exchangeRate          Decimal
  taxAmount             Decimal
  issuerCountry         String
  receiverCountry       String
  issuerEtaId           String
  receiverEtaId         String
  customerId            Int?
  supplierId            Int?
  exactMatchingRequired Boolean            @default(false)
  matchingKeywords      String[]
  expectedPaymentDates  Json?              // Phase 1: Expected payment dates based on payment terms
  Customer              Customer?          @relation(fields: [customerId], references: [id])
  Supplier              Supplier?          @relation(fields: [supplierId], references: [id])
  TransactionMatch      TransactionMatch[]
  CashflowProjection    CashflowProjection[] // Phase 1: Link to cashflow projections
}

model Customer {
  id               Int             @id @default(autoincrement())
  createdAt        DateTime        @default(now())
  updatedAt        DateTime
  name             String
  country          String?
  etaId            String?
  paymentTermsData Json?           // New comprehensive payment terms
  Invoice          Invoice[]
}

model Supplier {
  id               Int             @id @default(autoincrement())
  createdAt        DateTime        @default(now())
  updatedAt        DateTime
  name             String
  country          String?
  etaId            String?
  paymentTermsData Json?           // New comprehensive payment terms
  Invoice          Invoice[]
}

model Bank {
  id             Int             @id @default(autoincrement())
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  name           String          @unique
  bankStatements BankStatement[]
}

model BankStatement {
  id                   Int               @id @default(autoincrement())
  createdAt            DateTime          @default(now())
  updatedAt            DateTime          @updatedAt
  fileName             String?
  bankName             String
  accountNumber        String
  statementPeriodStart DateTime
  statementPeriodEnd   DateTime
  accountType          String?
  accountCurrency      String?
  startingBalance      Decimal
  endingBalance        Decimal
  rawTextContent       String?
  processingStatus     String            @default("processed")
  bankId               Int
  fileUrl              String?
  locked               Boolean           @default(false)
  parsed               Boolean           @default(false)
  validated            Boolean           @default(false)
  validatedAt          DateTime?
  validatedBy          String?
  validationNotes      String?
  validationStatus     String            @default("pending")
  googleSheetId        String?
  
  // Facility-specific fields
  tenor                String?           // e.g., "12 months", "2 years", etc.
  availableLimit       Decimal?          // Total available credit limit
  interestRate         String?           // e.g., "5.25%", "Prime + 2%", etc.
  
  bank                 Bank              @relation(fields: [bankId], references: [id])
  transactions         Transaction[]
  CashflowProjection   CashflowProjection[] // Facility repayment projections
}

model Transaction {
  id                        Int                        @id @default(autoincrement())
  createdAt                 DateTime                   @default(now())
  updatedAt                 DateTime                   @updatedAt
  transactionDate           DateTime
  creditAmount              Decimal?
  debitAmount               Decimal?
  description               String?
  balance                   Decimal?
  pageNumber                String?
  entityName                String?
  bankStatementId           Int
  classificationNotes       String?
  currency                  String?
  extractedEntities         String[]
  extractedReferences       String[]
  requiresManualReview      Boolean                    @default(false)
  classificationId          Int?
  alternativeCategories     String[]                   @default([])
  category                  TransactionCategory?
  classificationMethod      String?
  classificationReason      String?
  classifiedAt              DateTime?
  confidence                Float?
  isEligible                Boolean?
  llmModel                  String?
  llmPromptVersion          String?
  manualClassification      TransactionCategory?
  manualNotes               String?
  manuallyClassifiedAt      DateTime?
  manuallyClassifiedBy      String?
  manuallyOverridden        Boolean                    @default(false)
  processingTime            Int?
  bankStatement             BankStatement              @relation(fields: [bankStatementId], references: [id], onDelete: Cascade)
  TransactionMatch          TransactionMatch[]
}

model TransactionMatch {
  id                       Int                 @id @default(autoincrement())
  createdAt                DateTime            @default(now())
  updatedAt                DateTime
  transactionId            Int
  invoiceId                Int?
  matchType                MatchType
  matchScore               Float
  matchReason              String[]
  passedStrictCriteria     Boolean
  strictCriteriaDetails    Json?
  status                   MatchStatus         @default(PENDING)
  verifiedAt               DateTime?
  verifiedBy               String?
  verificationNotes        String?
  isEligible               Boolean
  transactionCategory      TransactionCategory
  classificationReason     String?
  classificationConfidence Float?
  Invoice                  Invoice?            @relation(fields: [invoiceId], references: [id])
  Transaction              Transaction         @relation(fields: [transactionId], references: [id])

  @@unique([transactionId, invoiceId])
}

// Phase 1: Cashflow Projection System
model CashflowProjection {
  id              Int           @id @default(autoincrement())
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  projectionDate  DateTime      // Date this projection is for
  projectedAmount Decimal       // Positive for inflows, negative for outflows
  actualAmount    Decimal?      // Actual amount when it occurs
  type            CashflowType
  status          CashflowStatus @default(PROJECTED)
  confidence      Float         @default(1.0) // 0.0 to 1.0
  description     String?
  
  // Phase 1: Only invoice relationships
  invoiceId       Int?
  Invoice         Invoice?      @relation(fields: [invoiceId], references: [id])
  
  // Recurring payment relationship
  recurringPaymentId Int?
  RecurringPayment   RecurringPayment? @relation(fields: [recurringPaymentId], references: [id])
  
  // Bank facility relationship for facility repayments
  bankStatementId Int?
  BankStatement   BankStatement? @relation(fields: [bankStatementId], references: [id])
  
  @@index([projectionDate])
  @@index([type, status])
  @@index([invoiceId])
  @@index([recurringPaymentId])
  @@index([bankStatementId])
}

// Recurring Payments Model
model RecurringPayment {
  id              Int                   @id @default(autoincrement())
  createdAt       DateTime              @default(now())
  updatedAt       DateTime              @updatedAt
  name            String                // e.g., "Monthly Salaries", "Office Rent"
  description     String?               // Additional details
  amount          Decimal               // Amount per occurrence
  type            CashflowType          // INFLOW or OUTFLOW type
  frequency       RecurrenceFrequency   // How often it occurs
  startDate       DateTime              // When it starts
  endDate         DateTime?             // When it ends (optional)
  nextDueDate     DateTime              // Next occurrence date
  dayOfMonth      Int?                  // For monthly: which day (1-31)
  dayOfWeek       Int?                  // For weekly: which day (0-6, Sunday=0)
  isActive        Boolean               @default(true)
  category        String?               // e.g., "Payroll", "Rent", "Utilities"
  currency        String                @default("USD")
  confidence      Float                 @default(1.0) // 0.0 to 1.0
  
  // Generated projections
  CashflowProjection CashflowProjection[]
  
  @@index([isActive, nextDueDate])
  @@index([type, isActive])
}

// Currency Management Models
model Currency {
  id                    Int                  @id @default(autoincrement())
  createdAt             DateTime             @default(now())
  updatedAt             DateTime             @updatedAt
  code                  String               @unique // ISO 4217 currency codes (USD, EUR, GBP, CNY, EGP)
  name                  String               // Full name (US Dollar, Euro, etc.)
  symbol                String               // Currency symbol ($, €, £, ¥, £E)
  isActive              Boolean              @default(true)
  isBaseCurrency        Boolean              @default(false) // EGP will be the base currency
  decimalPlaces         Int                  @default(2) // Number of decimal places for this currency
  
  // Relationships
  baseCurrencyRates     CurrencyRate[]       @relation("BaseCurrency")
  targetCurrencyRates   CurrencyRate[]       @relation("TargetCurrency")
  
  @@index([code, isActive])
  @@index([isBaseCurrency])
}

model CurrencyRate {
  id                    Int                  @id @default(autoincrement())
  createdAt             DateTime             @default(now())
  updatedAt             DateTime             @updatedAt
  baseCurrencyId        Int                  // Currency to convert from (usually EGP)
  targetCurrencyId      Int                  // Currency to convert to
  rate                  Decimal              // Exchange rate (how much of target currency = 1 base currency)
  inverseRate           Decimal              // Inverse rate for quick conversion (how much of base currency = 1 target currency)
  effectiveDate         DateTime             // When this rate becomes effective
  expiryDate            DateTime?            // When this rate expires (optional)
  source                String?              // Source of the exchange rate (e.g., "Central Bank", "API", "Manual")
  isActive              Boolean              @default(true)
  
  // Relationships
  baseCurrency          Currency             @relation("BaseCurrency", fields: [baseCurrencyId], references: [id])
  targetCurrency        Currency             @relation("TargetCurrency", fields: [targetCurrencyId], references: [id])
  
  @@unique([baseCurrencyId, targetCurrencyId, effectiveDate])
  @@index([baseCurrencyId, targetCurrencyId, isActive])
  @@index([effectiveDate, isActive])
}

// Phase 1: Enums
enum CashflowType {
  CUSTOMER_RECEIVABLE
  SUPPLIER_PAYABLE
  RECURRING_INFLOW     // For recurring income like subscriptions
  RECURRING_OUTFLOW    // For recurring expenses like salaries, rent
  BANK_OBLIGATION      // For facility repayments
  LOAN_PAYMENT         // For loan payments
  // Phase 3: Additional types will be added later
  // INTERNAL_TRANSFER
  // TAX_PAYMENT
  // OTHER_INCOME
  // OTHER_EXPENSE
}

enum CashflowStatus {
  PROJECTED
  CONFIRMED
  PARTIAL
  COMPLETED
  OVERDUE
  CANCELLED
}

enum MatchStatus {
  PENDING
  APPROVED
  REJECTED
  DISPUTED
  REQUIRES_REVIEW
}

enum MatchType {
  AUTOMATIC
  SUGGESTED
  POTENTIAL
  MANUAL
}

enum RecurrenceFrequency {
  DAILY
  WEEKLY
  BIWEEKLY       // Every 2 weeks
  MONTHLY
  QUARTERLY      // Every 3 months
  SEMIANNUALLY   // Every 6 months
  ANNUALLY
}

enum TransactionCategory {
  CUSTOMER_PAYMENT
  SUPPLIER_PAYMENT
  INTERNAL_TRANSFER
  BANK_CHARGES
  BANK_PAYMENTS
  UNKNOWN
  OTHER
}
