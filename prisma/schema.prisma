generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Invoice {
  id                    Int                  @id @default(autoincrement())
  createdAt             DateTime             @default(now())
  updatedAt             DateTime
  invoiceDate           DateTime
  invoiceNumber         String               @unique
  issuerName            String
  receiverName          String
  totalSales            Decimal
  totalDiscount         Decimal
  netAmount             Decimal
  total                 Decimal
  invoiceStatus         String
  currency              String               @default("EGP")
  exchangeRate          Decimal
  taxAmount             Decimal
  issuerCountry         String
  receiverCountry       String
  issuerEtaId           String
  receiverEtaId         String
  customerId            Int?
  supplierId            Int?
  exactMatchingRequired Boolean              @default(false)
  matchingKeywords      String[]
  expectedPaymentDates  Json?
  CashflowProjection    CashflowProjection[]
  Customer              Customer?            @relation(fields: [customerId], references: [id])
  Supplier              Supplier?            @relation(fields: [supplierId], references: [id])
  TransactionMatch      TransactionMatch[]
}

model Customer {
  id               Int       @id @default(autoincrement())
  createdAt        DateTime  @default(now())
  updatedAt        DateTime
  name             String
  country          String?
  etaId            String?
  paymentTermsData Json?
  Invoice          Invoice[]
}

model Supplier {
  id               Int       @id @default(autoincrement())
  createdAt        DateTime  @default(now())
  updatedAt        DateTime
  name             String
  country          String?
  etaId            String?
  paymentTermsData Json?
  Invoice          Invoice[]
}

model Bank {
  id             Int             @id @default(autoincrement())
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  name           String          @unique
  bankStatements BankStatement[]
}

model BankStatement {
  id                   Int                  @id @default(autoincrement())
  createdAt            DateTime             @default(now())
  updatedAt            DateTime             @updatedAt
  fileName             String?
  bankName             String
  accountNumber        String
  statementPeriodStart DateTime
  statementPeriodEnd   DateTime
  accountType          String?
  accountCurrency      String?
  startingBalance      Decimal
  endingBalance        Decimal
  rawTextContent       String?
  processingStatus     String               @default("processed")
  bankId               Int
  fileUrl              String?
  locked               Boolean              @default(false)
  parsed               Boolean              @default(false)
  validated            Boolean              @default(false)
  validatedAt          DateTime?
  validatedBy          String?
  validationNotes      String?
  validationStatus     String               @default("pending")
  googleSheetId        String?
  availableLimit       Decimal?
  interestRate         String?
  tenor                String?
  bank                 Bank                 @relation(fields: [bankId], references: [id])
  CashflowProjection   CashflowProjection[]
  transactions         Transaction[]
}

model Transaction {
  id                    Int                  @id @default(autoincrement())
  createdAt             DateTime             @default(now())
  updatedAt             DateTime             @updatedAt
  transactionDate       DateTime
  creditAmount          Decimal?
  debitAmount           Decimal?
  description           String?
  balance               Decimal?
  pageNumber            String?
  entityName            String?
  bankStatementId       Int
  alternativeCategories String[]             @default([])
  category              TransactionCategory?
  classificationId      Int?
  classificationMethod  String?
  classificationNotes   String?
  classificationReason  String?
  classifiedAt          DateTime?
  confidence            Float?
  currency              String?
  extractedEntities     String[]
  extractedReferences   String[]
  isEligible            Boolean?
  llmModel              String?
  llmPromptVersion      String?
  manualClassification  TransactionCategory?
  manualNotes           String?
  manuallyClassifiedAt  DateTime?
  manuallyClassifiedBy  String?
  manuallyOverridden    Boolean              @default(false)
  processingTime        Int?
  requiresManualReview  Boolean              @default(false)
  bankStatement         BankStatement        @relation(fields: [bankStatementId], references: [id], onDelete: Cascade)
  TransactionMatch      TransactionMatch[]
}

model TransactionMatch {
  id                       Int                 @id @default(autoincrement())
  createdAt                DateTime            @default(now())
  updatedAt                DateTime
  transactionId            Int
  invoiceId                Int?
  matchType                MatchType
  matchScore               Float
  matchReason              String[]
  passedStrictCriteria     Boolean
  strictCriteriaDetails    Json?
  status                   MatchStatus         @default(PENDING)
  verifiedAt               DateTime?
  verifiedBy               String?
  verificationNotes        String?
  isEligible               Boolean
  transactionCategory      TransactionCategory
  classificationReason     String?
  classificationConfidence Float?
  Invoice                  Invoice?            @relation(fields: [invoiceId], references: [id])
  Transaction              Transaction         @relation(fields: [transactionId], references: [id])

  @@unique([transactionId, invoiceId])
}

model CashflowProjection {
  id                 Int               @id @default(autoincrement())
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
  projectionDate     DateTime
  projectedAmount    Decimal
  actualAmount       Decimal?
  type               CashflowType
  status             CashflowStatus    @default(PROJECTED)
  confidence         Float             @default(1.0)
  description        String?
  invoiceId          Int?
  recurringPaymentId Int?
  bankStatementId    Int?
  BankStatement      BankStatement?    @relation(fields: [bankStatementId], references: [id])
  Invoice            Invoice?          @relation(fields: [invoiceId], references: [id])
  RecurringPayment   RecurringPayment? @relation(fields: [recurringPaymentId], references: [id])

  @@index([projectionDate])
  @@index([type, status])
  @@index([invoiceId])
  @@index([recurringPaymentId])
  @@index([bankStatementId])
}

model RecurringPayment {
  id                 Int                  @id @default(autoincrement())
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  name               String
  description        String?
  amount             Decimal
  type               CashflowType
  frequency          RecurrenceFrequency
  startDate          DateTime
  endDate            DateTime?
  nextDueDate        DateTime
  dayOfMonth         Int?
  dayOfWeek          Int?
  isActive           Boolean              @default(true)
  category           String?
  currency           String               @default("USD")
  confidence         Float                @default(1.0)
  CashflowProjection CashflowProjection[]

  @@index([isActive, nextDueDate])
  @@index([type, isActive])
}

model Currency {
  id                  Int            @id @default(autoincrement())
  createdAt           DateTime       @default(now())
  updatedAt           DateTime       @updatedAt
  code                String         @unique
  name                String
  symbol              String
  isActive            Boolean        @default(true)
  isBaseCurrency      Boolean        @default(false)
  decimalPlaces       Int            @default(2)
  baseCurrencyRates   CurrencyRate[] @relation("BaseCurrency")
  targetCurrencyRates CurrencyRate[] @relation("TargetCurrency")

  @@index([code, isActive])
  @@index([isBaseCurrency])
}

model CurrencyRate {
  id               Int       @id @default(autoincrement())
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  baseCurrencyId   Int
  targetCurrencyId Int
  rate             Decimal
  inverseRate      Decimal
  effectiveDate    DateTime
  expiryDate       DateTime?
  source           String?
  isActive         Boolean   @default(true)
  baseCurrency     Currency  @relation("BaseCurrency", fields: [baseCurrencyId], references: [id])
  targetCurrency   Currency  @relation("TargetCurrency", fields: [targetCurrencyId], references: [id])

  @@unique([baseCurrencyId, targetCurrencyId, effectiveDate])
  @@index([baseCurrencyId, targetCurrencyId, isActive])
  @@index([effectiveDate, isActive])
}

enum CashflowType {
  CUSTOMER_RECEIVABLE
  SUPPLIER_PAYABLE
  RECURRING_INFLOW
  RECURRING_OUTFLOW
  BANK_OBLIGATION
  LOAN_PAYMENT
}

enum CashflowStatus {
  PROJECTED
  CONFIRMED
  PARTIAL
  COMPLETED
  OVERDUE
  CANCELLED
}

enum MatchStatus {
  PENDING
  APPROVED
  REJECTED
  DISPUTED
  REQUIRES_REVIEW
}

enum MatchType {
  AUTOMATIC
  SUGGESTED
  POTENTIAL
  MANUAL
}

enum RecurrenceFrequency {
  DAILY
  WEEKLY
  BIWEEKLY
  MONTHLY
  QUARTERLY
  SEMIANNUALLY
  ANNUALLY
}

enum TransactionCategory {
  CUSTOMER_PAYMENT
  SUPPLIER_PAYMENT
  INTERNAL_TRANSFER
  BANK_CHARGES
  BANK_PAYMENTS
  UNKNOWN
  OTHER
}
